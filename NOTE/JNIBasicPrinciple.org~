

* JNI的基本原理

** 在Java中调用C库函数

开发流程
------
在Java代码中通过JNI调用C函数的步骤如下：

第一步： 编写Java代码

第二步： 编译Java代码

第三步: 生成C语言头文件

第四步： 编写C代码

第五步： 生成C共享库

第六步： 运行Java程序

*** 第一步 编写Java代码

JNI方法是在Java代码中声明的。

在Java类中，使用"native"关键字，声明本地方法该方法与用C/C++编写的JNI本地函数相对应。"native"关键字告知Java编译器，在Java代码中带有该关键字的方法只是声明，具体由C/C++等其他语言编写实现。

如果起吊方法前的native关键字，编译代码时，Java编译器就会报错，抛出编译错误，告知该方法没有实现。

调用System.loadLibrary()方法加载具体的实现本地方法的C运行库。System.loadLibrary()方法加载由字符串参数指定的本地库，在不同操作系统平台下，加载的C运行库不同。

*** 第二步 编译Java代码

#+BEGIN_SRC java
javac xxx.java
#+END_SRC

生成 xxx.class

*** 第三步 生成C语言头文件

#+BEGIN_SRC java
javah -classpath path classname
#+END_SRC

生成classname.h

| Java类型 | Java本地类型 |
|----------+--------------|
| /        | <            |
|----------+--------------|
| byte     | jbyte        |
| short    | jshort       |
| int      | jint         |
| long     | jlong        |
| float    | jfloat       |
| double   | jdouble      |
| char     | jchar        |
| boolean  | jboolean     |
| void     | void         |

Java本地类型也提供了另外三种类型

| java引用类型 | java本地类型 |
|--------------+--------------|
| /            | <            |
|--------------+--------------|
| 对象         | Jobject      |
| String       | Jstring      |

*** 第四步 编写C/C++代码

编写xxx.c文件

*** 第五步 生成C共享库

#+BEGIN_SRC sh
cc -I/usr/lib/jvm/java-6-sun/include/linux
   -I/usr/lib/jvm/java-6-sun/include/
   -fPIC -shared -o libxxx.so xxx.c
#+END_SRC

*** 第六步 运行Java程序

#+BEGIN_SRC java
java -cp path -o java.library.path='path' classname
#+END_SRC

** 小结

（1）在java类中声明本地方法

（2）使用javah命令，生成包含JNI本地函数原型的头文件

（3）实现JNI本地函数

（4）生成C共享库

（5）通过JNI，调用JNI本地函数

* 调用JNI函数

在由C语言编写的JNI本地函数中如何控制Java端的代码

- 创建Java对象

- 访问静态成员域

- 调用类的静态方法

- 访问Java对象的成员变量

- 访问Java对象的方法

** 调用JNI函数的示例程序结构

** Java层代码 (JniFuncMain.java)

1.JniFuncMain类
#+BEGIN_SRC java
public class JniFuncMain
{
    print static int staticIntField = 300;

    // 加载本地库
    static { System.loadLibrary("jnifunc"); }

    // 本地方法声明

    public static native JniTest createJniObject();

    public static void main(String[] args)
    {
        // 从本地代码生成JniTest对象
	System.out.println("[Java] createJniObject() 调用本地方法");
	JniTest jniObj = createJniObject();

	// 调用JniTest对象的方法
	jniObj.callTest();
    }
}
#+END_SRC
JniFuncMain.java中的JniFuncMain类

+ 通过java静态块，在调用本地方法前，加载jnifunc运行库

+ 使用static关键字声明本地方法createJniObject()在调研那个此方法时不需要创建对象，直接通过JniFuncMain类调用即可

+ 不使用Java语言的new运算符，调用与createJniObject()本地方法相对应的C函数生成JniTest类的对象，在将对象的引用保存在jniObj引用变量中

+ 调用jniObj对象的callTest()方法

2.JniTest类

#+BEGIN_SRC java
class JniTest 
{
    private int intField;
    //构造方法

    public JniTest(int num)
    {
        intField = num;
	System.out.println("[Java] 调用JniTest对象的构造方法:intField = " + intField);
    }

    // 此方法由JNI本地函数调用
    public int callByNative(int num)
    {
        System.out.println("[Java] JniTest 对象的 callByNative("+ num +")调用");
	return num;
    }

    public void callTest() 
    {
        System.out.println("[Java] JniTest 对象的 callTest() 方法调用：intField="intField");
    }
}
#+END_SRC

** 分析JNI本地函数代码

1. JniFuncMain.h头文件

使用javah命令，生成本地方法的函数原型
#+BEGIN_SRC java
javah JniFuncMain
#+END_SRC
JniFuncMain.h
#+BEGIN_SRC c
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class JniFuncMain */

#ifndef _Included_JniFuncMain
#define _Included_JniFuncMain
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     JniFuncMain
 * Method:    createJniObject
 * Signature: ()LJniTest;
 */
JNIEXPORT jobject JNICALL Java_JniFuncMain_CreateJniObject(JNIEnv *, jclass);
#ifdef __cplusplus
}
#endif
#endif
#+END_SRC

createJniObject()本地方法对应的JNI本地函数原型，形式如下

JNIEXPORT jobject JNICALL Java_JniFuncMain_createJniObject(JNIEnv *, jclass)

2. jnifunc.cpp 文件

#+BEGIN_SRC C++
JNIEXPORT jobject JNICALL Java_JniFuncMain_createJniObject(JNIEnv *env, jclass clazz)
{
    jclass targetClass;
    jmethodID mid;
    jobject newObject;
    jstring helloStr;
    jfieldID fid;
    jint staticIntField;
    jint result;

    // 获取JniFuncMain类的staticIntField变量值
    fid = env->GetStaticFieldID(clazz, "staticIntField", "I");
    staticIntField = env->GetStaticIntField(clazz, fid);
    printf("[CPP] 获取JniFuncMain类的staticIntField值\n");
    printf("         JniFuncMain.staticIntField = %d\n", staticIntField);

    // 查找生成对象的类
    targetClass = new->NewObject(targetClass, mid , 100);

    // 查找构造方法
    mid = env->GetMethodID(targetClass, "<init>", "(I)V");

    // 生成JniTest对象(返回对象的引用)
    printf("[CPP]JniTest对象生成\n");
    newObject = env->NewObject(targetClass, mid, 100);

    // 调用对象的方法
    mid = env->GetMethodID(targetClass,"callByNative", "(I)I");
    result = env->CallIntMethod(newObject, mid , 200);

    //设置JniObject对象的intField值
    fid = env->GetFieldID(targetClass, "intField", "I");
    printf("[CPP] 设置JniTest对象的intField值为200\n");
    env->SetIntField(newObject, fid, result);

    //返回对象的引用
    return newObject;
}
#+END_SRC

3. 通过JNI,获取成员变量值

下面代码用于获取JniFuncMaind类的staticIntField成员变量的值

#+BEGIN_SRC c
// 1. 查找含有待放文成员变量的JniFuncMain类的jclass值
// 2. 获取staticField变量的ID值
fid = env->GetStaticFieldID(clazz, "staticIntField", "I");
// 3. 读取jclass与fieldid指定的成员变量值
staticIntField = env->GetStaticIntField(clazz, fid);
#+END_SRC

程序通过JNI访问java类/对象的成员变量安如下顺序进行：

(1) 查找含待放文的成员变量的Java类的jclass值
(2) 获取此类成员变量的jfieldID值。若成员变量为静态变量，则调用名称为GetStaticFieldID()的JNI函数；若待访问的成员变量是普通对象，则调用名称为GetFieldID()的JNI函数。
(3) 使用12中获得的jclass与jfieldID值，获取或设置成员变量值。

依据以上顺序，待读取树脂的staticIntField成员变量在JniFuncMain类被声明。JniFuncMain类的jclass值被传递给JNI本地函数java_JniFuncMain_createJniObject()的第二个参数中，若想获取指定类的jclass值，调用JNI函数FindClass()即可。

若想在本地代码中访问Java的成员变量，必须获取相应成员变量的ID值。例子中成员变量的ID保存在jfieldID类型的变量中。由于待读取数值的staticIntField成员变量时JniFUncMain类的静态变量，在获取staticIntField的ID时，影调用名称为GetStaticFieldID()的JNI函数。

在例子中的GetStaticFieldID()函数，与下表中的GetStaticFieldID()函数原型有些不同，函数原型中带有四个参数，而代码中仅有三个，缺少了env参数，这不是错误，而是与所用的编程语言相关。具体请参考后面Tip中关于JNI函数编码风格的说明。

| JNI函数 - GetStaticFieldID() |                                                                                            |
|------------------------------+--------------------------------------------------------------------------------------------|
| /                            | <                                                                                          |
| 形式                         | jfield GetStaticFieldID(JNIEnv *env, jclass clazz, const char*name, const char *signature) |
|------------------------------+--------------------------------------------------------------------------------------------|
| 说明                         | 返回指定类的指定的静态变量的jfieldID的值                                                   |
|------------------------------+--------------------------------------------------------------------------------------------|
| 参数                         | env-JNI接口指针 clazz-包含成员变量的类的jclass name-成员变量名 signature-成员变量签名      |

| JNI函数 - GetFieldID() |                                                                                       |
|------------------------+---------------------------------------------------------------------------------------|
| /                      | <                                                                                     |
| 形式                   | jfield GetFieldID(JNIEnv *env, jclass clazz, const char *name, const char *signature) |
|------------------------+---------------------------------------------------------------------------------------|
| 说明                   | 返回对象中指定的成员变量的jfieldID的值                                                |
|------------------------+---------------------------------------------------------------------------------------|
| 参数                   | env-JNI接口指针 clazz-包含成员变量的类的jclass name-成员变量名 signatuer-成员变量签名 |

以上两个函数都要去提供成员变量的签名。成员变量与成员方法都拥有签名，使用<JDK_HOME>/bin目录下的javap命令(java反编译器)，可以获取成员变量活成员方法签名。

Tip: 在JNI中获取成员变量活成员方法签名

形式： javap [选项] '类名'

选项： -s 输出java签名
      -p 输出所有类及成员

在获取成员变量所在的类与ID后，根据各个成员变量的类型与存储区块(static或non-static)，调用相应的JNI函数读取成员变量值即可。在JNI中有两种函数用来获取成员便令的值，分别为Get<type>Field函数与GetStatic<type> Field函数。<type>指Int, Char, Double等基本数据类型，具体参考JNI文档。

| JNI函数 GetStatic<type>Field |                                                                                                      |
|------------------------------+------------------------------------------------------------------------------------------------------|
| /                            | <                                                                                                    |
| 形式                         | <jnitype>GetStatic<type>Field(JNIEnv *env, jclass clazz, jfieldID fieldID)                           |
|------------------------------+------------------------------------------------------------------------------------------------------|
| 说明                         | 返回clazz类中ID为fieldID的静态变量的值                                                               |
|------------------------------+------------------------------------------------------------------------------------------------------|
| 参数                         | env-JNI接口指针 clazz-包含成员变量的类 fieldID-成员变量的ID                                          |
|------------------------------+------------------------------------------------------------------------------------------------------|
| 参考                         | <type>指Object、Boolean、Byte、Char、Short、Int、Long、Float、Double九种基本类型                     |
|                              | 返回类型<jnitype>指jobject、jboolean、jbyte、jchar、jshort、jint、jlong、jfloat、jdouble九种基本类型 |
|------------------------------+------------------------------------------------------------------------------------------------------|
| 返回值                       | 返回静态成员变量的值                                                                                 |

| JNI函数 Get<type>Field |                                                                     |
| /                      | <                                                                   |
|------------------------+---------------------------------------------------------------------|
| 形式                   | <jnitype>Get<type>Field(JNIEnv *env, Jobject obj, jfieldID fieldID) |
|------------------------+---------------------------------------------------------------------|
| 说明                   |     返回obj对象中ID为fieldID的成员变量的值                                       |
|------------------------+---------------------------------------------------------------------|
| 参数                   |      env-JNI接口指针                                                    |
|                        |      obj-包含成员变量的对象                                                  |
|                        |       fieldID-成员变量的ID                                               |
|------------------------+---------------------------------------------------------------------|
| 返回值                    |       返回成员变量的值                                                      |
