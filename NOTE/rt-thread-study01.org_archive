#    -*- mode: org -*-


Archived entries from file /home/yangyang/git/EmacsOrg/NOTE/rt-thread-study01.org

* DONE 开始研究代码的目录结构
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-09-04 二 15:04
  :ARCHIVE_FILE: ~/git/EmacsOrg/NOTE/rt-thread-study01.org
  :ARCHIVE_CATEGORY: rt-thread-study01
  :END:

首先要看的是Keil的Project窗口，里面列出了为划分层次而人为建立的目录结构：

| RTThread           |
|--------------------|
| =Applications=     |
| =Drivers=          |
| =STM32_StdPeriph=  |
| =ui=               |
| =Kernel=           |
| =CORTEX-M4=        |
| =Filesystem=       |
| =DeviceDrivers=    |
| =jpeg=             |
| =finsh=            |
| =Components=       |
| =LwIP=             |
| =pthreads=         |
| =RTGUI=            |
|                    |

打开各个折叠的目录看了一下,主要关注两个目录: =Application= 和 =STM32_StdPeriph=

| =Application=   |
|-----------------|
| =application.c= |
| =libc_export.c= |
| =setup.c=       |
| =startup.c=     |
|                 |
#+TBLFM: $1=application.c=

在startup.c中有着C语言的入口函数main()

| =STM32_StdPeriph=     |
|-----------------------|
| =system_stm32f4xx.c=  |
| =startup_stm32f4xx.s= |
|                       |

=startup_stm32f4x.s= 文件里面是汇编代码,是最开始的程序。

下面看一下汇编里面的关键代码

#+BEGIN_SRC asm
; Reset handler
Reset_Handler PROC
              EXPORT Reset_Handler [WEAK]
      IMPORT  SystemInit
      IMPORT  __main
           
              LDR    R0, =SystemInit
              BLX    R0
              LDR    R0, =__main
              BX     R0
              ENDP
#+END_SRC

系统在复位之后，调用了两个函数。

#+BEGIN_SRC c
/**
  * @brief  Setup the microcontroller system
  *         Initialize the Embedded Flash Interface, the PLL and update the 
  *         SystemFrequency variable.
  *         设置MCU，初始化嵌入式Flash接口，PLL和升级系统时钟频率变量
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
  /* FPU settings 设置FPU */
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access CPACR:协处理器访问控制寄存器 */
/*
0b00: 拒绝访问.任何访问尝试都会产生一个NOCP的UsageFault.
0b01: 优先级访问.非优先级访问产生一个NOCP fault.
0b10: 保留.访问的结果未预期
0b11: 全访问
*/
  #endif

  /* Reset the RCC clock configuration to the default reset state 
     复位RCC时钟配置为复位后默认状态 */

  /* Set HSION bit 内部高速时钟使能*/
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register 时钟配置寄存器 */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts 时钟中断寄存器 */
  RCC->CIR = 0x00000000;

#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}

#+END_SRC

#+BEGIN_SRC c

int main(void)
{
    /* disable interrupt first */
    rt_hw_interrupt_disable();

    /* startup RT-Thread RTOS */
    rtthread_startup();

    return 0;

#+END_SRC

关注 =rtthread_startup()= 函数，就在startup.c中，这是rt-thread的入口。
#+BEGIN_SRC c
/*This function will startup RT-Thread RTOS.*/
void rtthread_startup(void)
{
    /*init board*/
    rt_hw_board_init();

    /*show version*/
    rt_show_version();
    
    /*init tick*/
    rt_system_tick_init();

    /*init kernel object*/
    rt_system_object_init();

    /*init timer system*/
    rt_system_timer_init();

#if STM32_EXT_SRAM
    ext_sram_init();
    rt_system_heap_init((void*)STM32_EXT_SRAM_BEGIN,
                        (void*)STM32_EXT_SRAM_END);
#else
    rt_system_heap_init((void*)STM32_SRAM_BEGIN, (void*)STM32_SRAM_END);
#endif /* STM32_EXT_SRAM */

    /* init scheduler system */
    rt_system_scheduler_init();

    /* init all device */
    rt_device_init_all();

    /*init application*/
    rt_application_init();

    /*init timer thread*/
    rt_system_timer_thread_init();

    /*init idle thread*/
    rt_thread_idle_init();

    /*start scheduler*/
    rt_system_scheduler_start();

    /*never reach here*/
    return;
}
#+END_SRC

这段代码做了不少的事情，而且每一个事情的背后都隐藏着很多的知识储备。
- 初始化板子
- 打印版本信息
- 初始化tick
- 初始化内核对象
- 初始化定时器系统
- 初始化外部SRAM(在定义的情况下)
- 初始化调度系统
- 初始化所有的设备
- 初始化应用程序
- 初始化定时器线程
- 初始化空闲进程
- 开始调度

上面这些，大部分还都是与内核紧密相连的，没什么办法，一个一个的看看

1. =rt_hw_board_init()=
#+BEGIN_SRC c
/*This function will initial STM32 board.*/
void rt_hw_board_init()
{
    /*NVIC Configuration 设置中断向量表*/
    NVIC_Configurationa();

    /*Configure the SysTick 配置系统tick定时器和它的中断，并且启动tick定时器*/
    SysTick_Config(SystemCoreClock/RT_TICK_PER_SECOND);

    rt_hw_usart_init();/*根据定义的宏，配置对应的串口，并且注册了UART1*/
#ifdef RT_USING_CONSOLE
    rt_console_set_device(RT_CONSOLE_DEVICE_NAME);/*设置一个设备作为控制台设备。所有的输出都会被重定向到这个设备*/
#endif

    fsmc_gpio_init();/*配置液晶屏控制器*/

    mco_config();/*配置晶振*/
}
#+END_SRC

2. =void rt_show_version(void)=
这个函数就是用 =rt_kprintf= 打印了一些信息。

3. =void rt_system_tick_init(void)= 
这个函数在新的版本中不使用了

4. =void rt_system_object_init(void)=
这个函数在新的版本中不使用了

5. =void rt_system_timer_init(void)=
这个函数在新的版本中不使用了

6. =void rt_system_scheduler_init(void)=
这个函数将会初始化系统调度器
#+BEGIN_SRC c
void rt_system_scheduler_init(void)
{
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, 
      ("start scheduler: max priority 0X%02x\n", RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset++) {
        rt_list_init(&rt_thread_priority_table[offset]);
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
    rt_current_thread = RT_NULL;

    /*initialize ready priority group*/
    rt_thread_ready_priority_group = 0;

#if RT_THREAD_PRIORITY_MAX > 32
    /*initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /*initialize thread defunct*/
    rt_list_init(&rt_thread_defunct);
}
#+END_SRC

这里面比较主要的一个调用是rt_list_init()函数

跟踪一下代码

rtservice.h
#+BEGIN_SRC c
rt_inline void rt_list_init(rt_list_t *l)
{
    l->next = l->prev = l;
}
/*一个指向自己的链表，还是双向链表*/
#+END_SRC
#+BEGIN_SRC c
struct rt_list_node
{
    struct rt_list_node *next;
    struct rt_lsit_node *prev;
};
typedef struct rt_list_node rt_list_t;
/*定义了一个链表中的一个节点*/
#END_SRC

目前，我们接触到了一个数据结构，就是双向链表，而且是跟调度相关的。

暂时能想到的关联就是用这个双向链表管理所有的进程。

7. =rt_device_init_all()= 和 =rt_application_init()= 暂时先不分析。

device里面出现了object，而且是个抽象的设备层，这个放到后面再研究。

application则是创建线程，也先不管。

8. =rt_system_timer_thread_init()=
这个函数将会初始化所有的系统定时器线程
#+BEGIN_SRC c
void rt_system_timer_thread_init(void)
{
#ifdef RT_USING_TIMER_SOFT
    rt_list_init(&rt_soft_timer_list);

    /*start software timer thread*/
    rt_thread_init(&timer_thread,
             "timer",
	     rt_thread_timer_entry, RT_NULL,
	     &timer_thread_stack =[0]=, sizeof(timer_thread_stack),
	     RT_TIMER_THREAD_PRIO, 10);

    /*startup*/
    rt_thread_startup(&timer_thread);
#endif
}
#END_SRC

定义了一个软定时器双向链表 =rt_soft_timer_list=

又开了一个线程 =rt_thread_timer_entry=

=rt_thread_startup= 是用来启动一个线程，并且把它放到系统ready queue里面去。

对于 =rt_thread_init= 解释是这个函数用来初始化一个线程，通常它被用来初始化一个静态thread object。

并且调用了 =rt_object_init= 和 =_rt_thread_init= 两个函数

* DONE 定时器 SysTick
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-09-07 五 13:39
  :ARCHIVE_FILE: ~/git/EmacsOrg/NOTE/rt-thread-study01.org
  :ARCHIVE_CATEGORY: rt-thread-study01
  :END:

现在，回过头来看一下 =_rt_thread_init()= 这个函数

最后有一段
#+BEGIN_SRC c
/*init thread timer -> timer.c*/
rt_timer_init(&(thread->thread_timer), //静态定时器对象
              thread->name,            //定时器的名字
              rt_thread_timeout,       //超时函数
              thread,                  //超时函数的参数
              0,                       //定时器的tick
              RT_TIMER_FLAG_ONE_SHOT); //定时器的标志位
#+END_SRC

找了很多文件，发现没有一个集中的说明问题的……

《Cortex-M4 Technical Reference Manual》

4.2 Register summary

System control reigsters

|    Address | Name  | Type     | Reset      | Description                         |
|------------+-------+----------+------------+-------------------------------------|
| 0xE000E010 | STCSR | RW       | 0x00000000 | SysTick Control and Status Register |
| 0xE000E014 | STRVR | RW       | Unknown    | SysTick Reload Value Register       |
| 0xE000E018 | STCVR | RW clear | Unkndow    | SysTick Current Value Register      |
| 0xE000E01C | STCR  | RO       | STCALIB    | SysTick Calibration Value Register  |

《STM32F4xxx Cortex-M4 programming manual》

4.5 SysTick timer (STK)

The processor has a 24-bit system timer, SysTick, that counts down from the reload value to zero, reloads (wraps to) the value in the STK_LOAD register on the next clock edge, then counts down on subsequent clocks.

When the processor is halted for debugging the counter does not decrement.

| STK_CTRL SysTick control and status register |                                                                                  |
|----------------------------------------------+----------------------------------------------------------------------------------|
| COUNTFLAG                                    | Returns 1 if timer counted to 0 since last time this was read                    |
| CLKSOURCE                                    | Clock source selection                                                           |
|                                              | 0: AHB/8                                                                         |
|                                              | 1: Processor clock (AHB)                                                         |
| TICKINT                                      | SysTick exception request enable                                                 |
|                                              | 0: Counting down to zero does not assert the SysTick excepton request            |
|                                              | 1: Counting down to zero to asserts the SysTick exception request                |
|                                              | Note:Software can use COUNTFLAG to determine if SysTick has ever counted to zero |
| ENABLE                                       | Counter Enable                                                                   |
|                                              | 0: Counter disabled                                                              |
|                                              | 1: Counter enabled                                                               | 
Enables the counter. When ENABLE is set to 1, the counter loads the RELOAD value from the LOAD register and then counts down.

On reaching 0, it sets the COUNTFLAG to 1 and optionally asserts the SysTick depending on the value of TICKINT. 

It then loads the RELOAD value again, and begins counting.  

| STK_LOAD | SysTick reload value register                                                                             |
|----------+-----------------------------------------------------------------------------------------------------------|
| RELOAD   | RELOAD value                                                                                              |
|          | The LOAD register specifies the start value to load into the STK_VAL register when the counter is enabled |
|          | and when it reaches 0.                                                                                    |

Calculating the RELOAD value

The RELOAD value can be any value in the range 0x00000001-0x00FFFFFF. 

A start value of 0 is possible, but has no effect because the SysTick exception request and COUNTFLAG are activated when count from 1 to 0.

The RELOAD value is calculated according to its use:

- To generato a multi-shot timer with a period of N processor clock cycles, use a RELOAD value of N-1. For example, if the SysTick interrupt is required every 100 clock pulses, set RELOAD to 99.

- To deliver a single SysTick interrupt after a delay of N processor clock cycles, use a RELOAD of value N. For example, if a SysTick interrupt is required after 100 clock pulses, set RELOAD to 99.

| STK_VAL | SysTick current value regiser |
|---------+-------------------------------|
| CURRENT | Current counter value         | 
The VAL register contains the current value of the SysTick counter.

Reads return the current value of the SysTick counter.

A write of any value clears the field to 0, and also clears the COUNTFLAG bit in the STK_CTRL_register to 0.

| STK_CALIB | SysTick calibration value register                                                                                |
|-----------+-------------------------------------------------------------------------------------------------------------------|
| NOREF     | NOREF flag.                                                                                                       |
|           | Reads as zero. Indicates that a separate reference clock is provided. The frequency of this clock is HCLK/8       |
| SKEW      | SKEW falg.                                                                                                        |
|           | Indicates whether the TENMS value is exact.                                                                       |
|           | Reads as one. Calibration value for the 1 ms inexact timing is not knownbecause TENMS is not known.               |
|           | This can affect the suitablity of SysTick as a software real time clock.                                          |
| TENMS     | Calibration value.                                                                                                |
|           | Indicates the calibration value when the SysTick counter run on HCLK max/8 as external clock.                     |
|           | The value is product denpendent, please refer to the Product Reference Manual, SysTick Calibration Value section. |
|           | When HCLK is programmed at the maximum frequency, the SysTick period is 1ms.                                      |
|           | If calibration information is not known,                                                                          |
|           | calculate the calibration value required from the frequency of the processor clock or external clock.             |

SysTick design hits and tips

The SysTick counter runs on the processor clock.

If this clock signal is stopped for low power mode, the SysTick couner stops.

Ensure software uses aligned word accesses to access the SysTick registers.

The SysTick counter relaod and current value are undefined at reset, the correct initializaton sequence for the SysTick counter is :
1. Program reload value.
2. Clear current value.
3. Program Countrol and Status register.

看完了数据手册，对应的看一下代码 =core_cm4.h=

#+BEGIN_SRC c
/* System Tick Configration
   This function initialises the system tick timer and its interrupt and start the system tick tiemr.
   Counter is in free running mode to generate periodical interrupts.
 */
static __INLINE uint32_t SysTick_Confit(uint32_t ticks)
{
    if (ticks > SysTick_LOAD_RELOAD_Msk) { /* Reload value impossible */
        return(1);
    }
    SysTick->LOAD = (tick & SysTick_LOAD_RELOAD_Msk) - 1; /*set reload register*/
    NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);/*set Priority for Coterx-M0 System Interrupts*/
    SysTick->VAL = 0;
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_TICKINT_Msk   |
                    SysTick_CTRL_ENABLE_Msk; /*Enable SysTick IRQ and SysTick Timer*/
}
#+END_SRC

#+BEGIN_SRC c
/*SysTick Reload Register Definitions*/
#define SysTick_LOAD_RELOAD_Pos 0                                     /*SysTick LOAD: RELOAD Position*/
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFUL<<SysTick_LOAD_RELOAD_Pos) /*SysTick LOAD: RELOAD Mask*/
#+END_SRC

基本上做的事情是： 

先赋值，设置中断，清零，设置控制位

这个 =SysTick_IRQn= 在stm32f4xx.h里面

typedef enum IRQn-> =SysTick_IRQn= = -1 /*Cortex-M4 System Tick Interrupt*/

然后让我们跟踪一下这个中断吧

=startup_stm32f4xx.s= 里面写到
#+BEGIN_SRC asm
DCD SysTick_Handler

SysTick_Handler PROC
                EXPORT SysTick_Handler [WEAK]
		B      .
                ENDP
#+END_SRC

实现在board.c里面
#+BEGIN_SRC c
void SytTick_Handler(void)
{
    rt_interrupt_enter();
    rt_tick_increase();
    rt_interrupt_leave();
}
#+END_SRC

#+BEGIN_SRC c
void rt_tick_increase(void)
{
    struct rt_thread *thread; //定义一个线程结构体

    ++rt_tick; //这是一个静态全局变量，应该是用来存tick计数的

    thread = tr_thread_self(); //获取当前在运行的线程

    -- thread->remainning_tick; //线程剩余时间减少
    if (thread->remaining_tick == 0) { //看看是不是减少到零了
        thread->remaining_tick = thread->init_tick; //准备重新开始
	rt_thread_yield(); //主动让出CPU
    }
    rt_timer_check(); //timer.c 检查timer list，如果一个超时事件发生，相关的超时函数将会被调用
                      // 这个函数应该在操作系统时间中断内被调用                                                           
}
#+END_SRC

timer.c
#+BEGIN_SRC c
void rt_timer_check(void)
{
    struct rt_timer *t;
    rt_tick_t current_tick;
    register rt_base_t level;

    current_tick = rt_tick_get();

    /*disable interrupt*/
    level = rt_hw_interrupt_disable();

    while(!rt_list_isempty(&rt_timer_list)) {
        t = rt_list_entry(rt_timer_list.next, struct rt_timer, list);

	/*
	    It supposes that the new tick shall less than the half duration ofo tick max.
	*/
    }
    
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#+END_SRC



